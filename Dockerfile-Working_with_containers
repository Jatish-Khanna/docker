https://www.katacoda.com/courses/docker/5

#create container
docker create -v /var --name dataContainer busybox
#copy files to container
docker cp config.conf dataContainer:/config/
#list the contents of container
docker run --volumes-from dataContainer ubuntu ls /config

#Export container
docker export dataContainer > dataContainer.tar

#The command will import the Data Container back into Docker.
docker import dataContainer.tar 

#working with containers
#start redis server as redisdocker run -d --name redis redis

#create an alpinen container and link it to redis
docker run --link redis:redis alpine env
#Bring the alpine container to use env functionalitydocker run --link redis:redis alpine env

#Secondly, Docker will update the HOSTS file of the container with an entry for our source container with three names, the original, the alias and the hash-id. You can output the containers host entry using cat /etc/hosts
#
docker run --link redis:redis alpine cat /etc/hosts
#
#Example
#With a link created you can ping the source container in the same way as if it were a server running in your network.
#
docker run --link redis:redis alpine ping -c 1 redis
docker run --link redis:redis1 alpine ping -c 1 redis1

#Here is a simple node.js application which connects to redis using the hostname redis.
#
docker run -d -p 80:3000 --link redis:redis katacoda/redis-node-docker-example
#
#Test Connection
#Sending an HTTP request to the application will store the request in Redis and return a count. If you issue multiple requests, you'll see the counter increment as items are persisted.
#
curl docker

#The command below will launch an instance of the Redis-cli tool and connect to the redis server via its alias.

docker run -it --link redis:redis2 redis redis-cli -h redis2

#===================================================
#Netowrking between the containers
$ docker network create container-nw
#dcf015f6bd9967ec58b93369fc79f80a609a1d0be82abed4ffc12ae71324d98b
$ docker network ls
#NETWORK ID          NAME                DRIVER              SCOPE
#09df0c9f7616        bridge              bridge              local
#dcf015f6bd99        container-nw        bridge              local
#0c288d2ed25a        host                host                local
#4d3221fe852b        none                null                local


#launch new containers, using --net attribute to assign which network to launched container
docker run -d --name redis --net container-nw redis

#Docker no longer updates the environment and hosts configuration
$ docker run --net container-nw alpine env
#PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
#HOSTNAME=070bb589de55
#HOME=/root
$ docker run --net container-nw alpine cat /etc/hosts
#127.0.0.1       localhost
#::1     localhost ip6-localhost ip6-loopback
#fe00::0 ip6-localnet
#ff00::0 ip6-mcastprefix
#ff02::1 ip6-allnodes
#ff02::2 ip6-allrouters
#172.19.0.3      9fa462e77f46

#Docker start using embedded DNS server configured in /etc/resolv.conf
$ docker run --net container-nw alpine cat /etc/resolv.conf
#The DNS has been resolved by DNS server embedded in container
docker run --net container-nw alpine ping -c1 redis

#create new network
docker network create new-nw
#Attach container to new created network
docker network connect new-nw redis

#run application with the different network
docker run -d -p 80:3000 --net new-nw katacoda/redis-node-docker-example

docker network ls
#NETWORK ID          NAME                DRIVER              SCOPE
#7b5b089f4160        bridge              bridge              local
#711838ce458e        container-nw        bridge              local
#0c288d2ed25a        host                host                local
#e43bbc2cbe86        new-nw              bridge              local
#4d3221fe852b        none                null                local
$ docker container ls
#CONTAINER ID        IMAGE               COMMAND                  CREATED             STATUS              PORTS               NAMES
#fd7a3b23f872        redis               "docker-entrypoint.sâ€¦"   4 minutes ago       Up 4 minutes        6379/tcp            redis-container

#Connect Container with Alias
#The following command will connect our Redis instance to the frontend-network with the alias of db.
#docker network disconnect app-nw redis
docker network create app-nw
docker network connect --alias database-nw app-nw redis
#
#When containers attempt to access a service via the name db, they will be given the IP address of our Redis container.
#
docker run --net app-nw alpine ping -c1 database-nw



