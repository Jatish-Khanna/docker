# With Docker, there are two main ways for containers to communicate with each other. 

# 1) is via links which configure the container with environment variables and host entry allowing them to communicate. 
# 2) is using the Service Discovery pattern where uses information provided by third parties, in this scenario, it will be Docker's API.

# three keys properties required to be configured when launching the proxy container.
# 1) is binding the container to port 80 on the host using -p 80:80. This ensures all HTTP requests are handled by the proxy.
# 2) is to mount the docker.sock file. This is a connection to the Docker daemon running on the host and allows containers to access its metadata via the API. Nginx-proxy uses this to listen for events and then updates the NGINX configuration based on the container IP address. Mounting file works in the same way as directories using -v /var/run/docker.sock:/tmp/docker.sock:ro. We specify :ro to restrict access to read-only.

# 3) an optional _-e DEFAULTHOST=<domain>. If a request comes in and doesn't make any specified hosts, then this is the container where the request will be handled. This enables you to run multiple websites with different domains on a single machine with a fall-back to a known website.

#Start Nginx proxy
docker run -d -p 80:80 -e DEFAULT_HOST=proxy.example -v /var/run/docker.sock:/tmp/docker.sock:ro --name nginx jwilder/nginx-proxy

# Start a container with virtual host 
# set our HOST to match our DEFAULT_HOST so it will accept all requests.
# Multiple host can be started with same VIRTUAL_HOST - this will provision a clusture
docker run -d -p 80 -e VIRTUAL_HOST=proxy.example katacoda/docker-http-server

# Check generated configuration of container 
docker exec nginx ls
docker exec nginx cat /etc/nginx/conf.d/default.conf




